#ifndef __GJGAMELEVEL_H__
#define __GJGAMELEVEL_H__


#include "../includes.h"

class GJGameLevel: public cocos2d::CCNode {
public:
    static GJGameLevel* create();
    static GJGameLevel* create(cocos2d::CCDictionary* p0, bool p1);
    TodoReturn areCoinsVerified();
    TodoReturn copyLevelInfo(GJGameLevel* p0);
    void dataLoaded(DS_Dictionary* p0);
    TodoReturn demonIconForDifficulty(DemonDifficultyType p0);
    TodoReturn generateSettingsString();
    gd::string getAudioFileName();
    int getAverageDifficulty();
    char const* getCoinKey(int p0);
    TodoReturn getLastBuildPageForTab(int p0);
    TodoReturn getLengthKey(int length, bool platformer);
    TodoReturn getListSnapshot();
    TodoReturn getNormalPercent();
    TodoReturn getSongName();
    gd::string getUnpackedLevelDescription();
    TodoReturn handleStatsConflict(GJGameLevel* p0);
    static gd::string lengthKeyToString(int key);
    TodoReturn levelWasAltered();
    TodoReturn levelWasSubmitted();
    TodoReturn parseSettingsString(std::string p0);
    void saveNewScore(int p0, int p1);
    void savePercentage(int percent, bool p1, int clicks, int attempts, bool p4);
    TodoReturn scoreStringToVector(std::string& p0, std::vector<int>& p1);
    TodoReturn scoreVectorToString(std::vector<int>& p0, int p1);
    void setAccountID(int p0);
    void setAttempts(int p0);
    void setAttemptTime(int p0);
    void setClicks(int p0);
    void setCoinsVerified(int p0);
    void setDailyID(int p0);
    void setDemon(int p0);
    void setJumps(int p0);
    void setLastBuildPageForTab(int p0, int p1);
    void setLevelID(int p0);
    void setNewNormalPercent(int p0);
    void setNewNormalPercent2(int p0);
    void setNormalPercent(int p0);
    void setObjectCount(int p0);
    void setOriginalLevel(int p0);
    void setPassword(int p0);
    void setStars(int p0);
    TodoReturn storeNewLocalScore(int p0, int p1);
    TodoReturn unverifyCoins();
    virtual void encodeWithCoder(DS_Dictionary* p0);
    virtual bool canEncode();
    virtual bool init();
    cocos2d::CCDictionary* m_lastBuildSave;
    geode::SeedValueRSV m_levelID;
    std::string m_levelName;
    std::string m_levelDesc;
    std::string m_levelString;
    std::string m_creatorName;
    std::string m_recordString;
    std::string m_uploadDate;
    std::string m_updateDate;
    std::string m_unkString1;
    std::string m_unkString2;
    cocos2d::CCPoint m_unkPoint;
    geode::SeedValueRSV m_userID;
    geode::SeedValueRSV m_accountID;
    GJDifficulty m_difficulty;
    int m_audioTrack;
    int m_songID;
    int m_levelRev;
    bool m_unlisted;
    bool m_friendsOnly;
    geode::SeedValueRSV m_objectCount;
    int m_levelIndex;
    int m_ratings;
    int m_ratingsSum;
    int m_downloads;
    bool m_isEditable;
    bool m_gauntletLevel;
    bool m_gauntletLevel2;
    int m_workingTime;
    int m_workingTime2;
    bool m_lowDetailMode;
    bool m_lowDetailModeToggled;
    bool m_k112;
    bool m_selected;
    bool m_localOrSaved;
    bool m_disableShake;
    geode::SeedValueRS m_isVerified;
    bool m_isVerifiedRaw;
    bool m_isUploaded;
    bool m_hasBeenModified;
    int m_levelVersion;
    int m_gameVersion;
    geode::SeedValueRSV m_attempts;
    geode::SeedValueRSV m_jumps;
    geode::SeedValueRSV m_clicks;
    geode::SeedValueRSV m_attemptTime;
    int m_chk;
    bool m_isChkValid;
    bool m_isCompletionLegitimate;
    geode::SeedValueVSR m_normalPercent;
    geode::SeedValueRSV m_orbCompletion;
    geode::SeedValueRSV m_newNormalPercent2;
    int m_practicePercent;
    int m_likes;
    int m_dislikes;
    int m_levelLength;
    int m_featured;
    int m_isEpic;
    bool m_levelFavorited;
    int m_levelFolder;
    geode::SeedValueRSV m_dailyID;
    geode::SeedValueRSV m_demon;
    int m_demonDifficulty;
    geode::SeedValueRSV m_stars;
    bool m_autoLevel;
    int m_coins;
    geode::SeedValueRSV m_coinsVerified;
    geode::SeedValueRS m_password;
    geode::SeedValueRSV m_originalLevel;
    bool m_twoPlayerMode;
    int m_failedPasswordAttempts;
    geode::SeedValueRSV m_firstCoinVerified;
    geode::SeedValueRSV m_secondCoinVerified;
    geode::SeedValueRSV m_thirdCoinVerified;
    int m_starsRequested;
    bool m_showedSongWarning;
    int m_starRatings;
    int m_starRatingsSum;
    int m_maxStarRatings;
    int m_minStarRatings;
    int m_demonVotes;
    int m_rateStars;
    int m_rateFeature;
    std::string m_rateUser;
    bool m_dontSave;
    bool m_levelNotDownloaded;
    int m_requiredCoins;
    bool m_isUnlocked;
    cocos2d::CCPoint m_lastCameraPos;
    float m_fastEditorZoom;
    int m_lastBuildTab;
    int m_lastBuildPage;
    int m_lastBuildGroupID;
    GJLevelType m_levelType;
    int m_M_ID;
    std::string m_tempName;
    std::string m_capacityString;
    bool m_highObjectsEnabled;
    bool m_unlimitedObjectsEnabled;
    std::string m_personalBests;
    int m_timestamp;
    int m_unkInt;
    std::string m_songIDs;
    std::string m_sfxIDs;
    int m_54;
    int m_bestTime;
    int m_bestPoints;
    int m_k111;
    std::string m_unkString3;
    std::string m_unkString4;
};

#endif /* __GJGAMELEVEL_H__ */