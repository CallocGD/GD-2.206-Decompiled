#ifndef __GAMEMANAGER_H__
#define __GAMEMANAGER_H__


#include "../includes.h"


/* -- Predefined Subclasses -- */

class GManager;

class GameManager: public GManager {
public:
    static GameManager* get();
    static GameManager* sharedState();
    PlayLayer* getPlayLayer();
    LevelEditorLayer* getEditorLayer();
    GJBaseGameLayer* getGameLayer();
    int getPlayerFrame();
    int getPlayerShip();
    int getPlayerBall();
    int getPlayerBird();
    int getPlayerDart();
    int getPlayerRobot();
    int getPlayerSpider();
    int getPlayerSwing();
    int getPlayerGlowColor();
    int getPlayerStreak();
    int getPlayerShipFire();
    int getPlayerDeathEffect();
    int getPlayerJetpack();
    int getPlayerColor();
    int getPlayerColor2();
    bool getPlayerGlow();
    void setPlayerFrame(int id);
    void setPlayerShip(int id);
    void setPlayerBall(int id);
    void setPlayerBird(int id);
    void setPlayerDart(int id);
    void setPlayerRobot(int id);
    void setPlayerSpider(int id);
    void setPlayerSwing(int id);
    void setPlayerColor3(int id);
    void setPlayerStreak(int id);
    void setPlayerShipStreak(int id);
    void setPlayerDeathEffect(int id);
    void setPlayerJetpack(int id);
    void setPlayerColor(int id);
    void setPlayerColor2(int id);
    void setPlayerGlow(bool v);
    bool getGameVariableDefault(const char* key, bool defaultValue);
    int getIntGameVariableDefault(const char* key, int defaultValue);
    TodoReturn accountStatusChanged();
    int activeIconForType(IconType p0);
    TodoReturn addCustomAnimationFrame(int p0, int p1, std::string p2, std::string p3);
    TodoReturn addDuplicateLastFrame(int p0);
    TodoReturn addGameAnimation(int p0, int p1, float p2, std::string p3, std::string p4, int p5);
    TodoReturn addIconDelegate(cocos2d::CCObject* p0, int p1);
    TodoReturn addNewCustomObject(std::string p0);
    TodoReturn addToGJLog(cocos2d::CCString* p0);
    TodoReturn applicationDidEnterBackground();
    TodoReturn applicationWillEnterForeground();
    TodoReturn calculateBaseKeyForIcons();
    TodoReturn canShowRewardedVideo();
    TodoReturn checkSteamAchievementUnlock();
    TodoReturn checkUsedIcons();
    TodoReturn claimItemsResponse(std::string p0);
    TodoReturn clearGJLog();
    cocos2d::ccColor3B colorForIdx(int p0);
    TodoReturn colorForPos(int p0);
    TodoReturn colorKey(int p0, UnlockType p1);
    bool completedAchievement(std::string p0);
    static int countForType(IconType p0);
    TodoReturn defaultFrameForAnimation(int p0);
    TodoReturn defaultYOffsetForBG2(int p0);
    TodoReturn didExitPlayscene();
    void doQuickSave();
    TodoReturn dpadConfigToString(UIButtonConfig& p0);
    TodoReturn eventUnlockFeature(char const* p0);
    void fadeInMenuMusic();
    void fadeInMusic(std::string p0);
    TodoReturn finishedLoadingBGAsync(cocos2d::CCObject* p0);
    TodoReturn finishedLoadingGAsync(int p0);
    TodoReturn finishedLoadingGAsync1(cocos2d::CCObject* p0);
    TodoReturn finishedLoadingGAsync2(cocos2d::CCObject* p0);
    TodoReturn finishedLoadingIconAsync(cocos2d::CCObject* p0);
    TodoReturn finishedLoadingMGAsync(int p0);
    TodoReturn finishedLoadingMGAsync1(cocos2d::CCObject* p0);
    TodoReturn finishedLoadingMGAsync2(cocos2d::CCObject* p0);
    TodoReturn followTwitch();
    TodoReturn followTwitter();
    TodoReturn framesForAnimation(int p0);
    TodoReturn frameTimeForAnimation(int p0);
    TodoReturn generateSecretNumber();
    TodoReturn getBGTexture(int p0);
    TodoReturn getFontFile(int p0);
    TodoReturn getFontTexture(int p0);
    bool getGameVariable(char const* p0);
    TodoReturn getGTexture(int p0);
    int getIconRequestID();
    int getIntGameVariable(char const* p0);
    TodoReturn getMenuMusicFile();
    TodoReturn getMGTexture(int p0);
    TodoReturn getNextUniqueObjectKey();
    TodoReturn getNextUsedKey(int p0, bool p1);
    TodoReturn getOrderedCustomObjectKeys();
    TodoReturn getPracticeMusicFile();
    bool getUGV(char const* p0);
    TodoReturn getUnlockForAchievement(std::string p0, int& p1, UnlockType& p2);
    TodoReturn groundHasSecondaryColor(int p0);
    TodoReturn iconAndTypeForKey(int p0, int& p1, int& p2);
    TodoReturn iconKey(int p0, IconType p1);
    static UnlockType iconTypeToUnlockType(IconType p0);
    bool isColorUnlocked(int p0, UnlockType p1);
    bool isIconLoaded(int p0, int p1);
    bool isIconUnlocked(int p0, IconType p1);
    TodoReturn itemPurchased(char const* p0);
    TodoReturn joinDiscord();
    void joinReddit();
    int keyForIcon(int iconIdx, int iconEnum);
    TodoReturn levelIsPremium(int p0, int p1);
    TodoReturn likeFacebook();
    void loadBackground(int p0);
    void loadBackgroundAsync(int p0);
    void loadDeathEffect(int p0);
    TodoReturn loadDpadFromString(UIButtonConfig& p0, std::string p1);
    TodoReturn loadDPadLayout(int p0, bool p1);
    TodoReturn loadFont(int p0);
    void loadGround(int p0);
    void loadGroundAsync(int p0);
    cocos2d::CCTexture2D* loadIcon(int p0, int p1, int p2);
    TodoReturn loadIconAsync(int p0, int p1, int p2, cocos2d::CCObject* p3);
    void loadMiddleground(int p0);
    void loadMiddlegroundAsync(int p0);
    TodoReturn loadVideoSettings();
    TodoReturn lockColor(int p0, UnlockType p1);
    TodoReturn lockIcon(int p0, IconType p1);
    TodoReturn logLoadedIconInfo();
    void openEditorGuide();
    TodoReturn playMenuMusic();
    TodoReturn playSFXTrigger(SFXTriggerGameObject* p0);
    TodoReturn prepareDPadSettings();
    TodoReturn printGJLog();
    TodoReturn queueReloadMenu();
    TodoReturn rateGame();
    void recountUserStats(std::string p0);
    void reloadAll(bool switchingModes, bool toFullscreen, bool borderless, bool unused);
    void reloadAll(bool switchingModes, bool toFullscreen, bool unused);
    void reloadAllStep2();
    void reloadAllStep3();
    void reloadAllStep4();
    void reloadAllStep5();
    TodoReturn reloadMenu();
    TodoReturn removeCustomObject(int p0);
    TodoReturn removeIconDelegate(int p0);
    TodoReturn reorderKey(int p0, bool p1);
    void reportAchievementWithID(char const* p0, int p1, bool p2);
    TodoReturn reportPercentageForLevel(int p0, int p1, bool p2);
    TodoReturn resetAchievement(std::string p0);
    TodoReturn resetAdTimer();
    TodoReturn resetAllIcons();
    TodoReturn resetCoinUnlocks();
    TodoReturn resetDPadSettings(bool p0);
    TodoReturn resolutionForKey(int p0);
    void returnToLastScene(GJGameLevel* p0);
    TodoReturn rewardedVideoAdFinished(int p0);
    TodoReturn rewardedVideoHidden();
    TodoReturn rewardedVideoHiddenDelayed();
    void safePopScene();
    TodoReturn saveAdTimer();
    TodoReturn saveDPadLayout(int p0, bool p1);
    void setGameVariable(char const* p0, bool p1);
    void setHasRatingPower(int p0);
    void setIntGameVariable(char const* p0, int p1);
    void setPlayerUserID(int p0);
    void setUGV(char const* p0, bool p1);
    TodoReturn setupGameAnimations();
    gd::string sheetNameForIcon(int p0, int p1);
    TodoReturn shortenAdTimer(float p0);
    TodoReturn shouldShowInterstitial(int p0, int p1, int p2);
    void showInterstitial();
    void showInterstitialForced();
    void showMainMenuAd();
    TodoReturn startUpdate();
    TodoReturn stringForCustomObject(int p0);
    TodoReturn subYouTube();
    TodoReturn switchCustomObjects(int p0, int p1);
    TodoReturn switchScreenMode(bool p0, bool p1);
    TodoReturn syncPlatformAchievements();
    TodoReturn toggleGameVariable(char const* p0);
    TodoReturn tryCacheAd();
    TodoReturn tryShowInterstitial(int p0, int p1, int p2);
    TodoReturn unloadBackground();
    void unloadIcon(int p0, int p1, int p2);
    void unloadIcons(int p0);
    TodoReturn unlockColor(int p0, UnlockType p1);
    TodoReturn unlockedPremium();
    void unlockIcon(int p0, IconType p1);
    TodoReturn unlockTypeToIconType(int p0);
    void updateCustomFPS();
    TodoReturn updateMusic();
    void verifyAchievementUnlocks();
    TodoReturn verifyCoinUnlocks();
    TodoReturn verifyStarUnlocks();
    TodoReturn verifySyncedCoins();
    TodoReturn videoAdHidden();
    TodoReturn videoAdShowed();
    virtual void update(float p0);
    virtual bool init();
    virtual void encodeDataTo(DS_Dictionary* p0);
    virtual void dataLoaded(DS_Dictionary* p0);
    virtual void firstLoad();
    cocos2d::CCDictionary* m_unkAnimationDict;
    cocos2d::CCDictionary* m_unkAnimationDict2;
    cocos2d::CCDictionary* m_frameTimeForAnimation;
    cocos2d::CCDictionary* m_framesForAnimation;
    cocos2d::CCDictionary* m_defaultFrames;
    bool m_switchModes;
    bool m_toFullscreen;
    bool m_reloading;
    bool m_unkBool1;
    bool m_unkBool2;
    bool m_vsyncEnabled;
    cocos2d::CCDictionary* m_valueKeeper;
    cocos2d::CCDictionary* m_unlockValueKeeper;
    cocos2d::CCDictionary* m_customObjectDict;
    double m_adTimer;
    double m_adCache;
    bool m_unkBool3;
    int m_unkSize4_1;
    double m_unkDouble2;
    int m_unkSize4_2;
    int m_unkSize4_3;
    bool m_loaded;
    bool m_googlePlaySignedIn;
    std::string m_unknownString;
    int m_unkSize4_4;
    PlayLayer* m_playLayer;
    LevelEditorLayer* m_levelEditorLayer;
    GJBaseGameLayer* m_gameLayer;
    void* m_unkPtr;
    MenuLayer* m_menuLayer;
    bool m_inMenuLayer;
    void* m_unknownVariable;
    bool m_unknownBool3;
    bool m_unknownPlayLayerBool;
    bool m_unknownBool4;
    bool m_unknownBool5;
    std::string m_playerUDID;
    std::string m_playerName;
    bool m_commentsEnabled;
    geode::SeedValueRSV m_playerUserID;
    float m_bgVolume;
    float m_sfxVolume;
    float m_timeOffset;
    bool m_ratedGame;
    bool m_clickedFacebook;
    bool m_clickedTwitter;
    bool m_clickedYouTube;
    bool m_clickedTwitch;
    bool m_clickedDiscord_;
    bool m_clickedReddit;
    double m_socialsDuration;
    bool m_showedAd;
    bool m_unknownBool;
    bool m_editorEnabled;
    int m_sceneEnum;
    bool m_searchObjectBool;
    geode::SeedValueRSV m_playerFrame;
    geode::SeedValueRSV m_playerShip;
    geode::SeedValueRSV m_playerBall;
    geode::SeedValueRSV m_playerBird;
    geode::SeedValueRSV m_playerDart;
    geode::SeedValueRSV m_playerRobot;
    geode::SeedValueRSV m_playerSpider;
    geode::SeedValueRSV m_playerSwing;
    geode::SeedValueRSV m_playerColor;
    geode::SeedValueRSV m_playerColor2;
    geode::SeedValueRSV m_playerGlowColor;
    geode::SeedValueRSV m_playerStreak;
    geode::SeedValueRSV m_playerShipFire;
    geode::SeedValueRSV m_playerDeathEffect;
    geode::SeedValueRSV m_playerJetpack;
    geode::SeedValueSR m_chk;
    geode::SeedValueSR m_secretNumber;
    bool m_playerGlow;
    IconType m_playerIconType;
    bool m_everyPlaySetup;
    bool m_showSongMarkers;
    bool m_showBPMMarkers;
    bool m_recordGameplay;
    bool m_showProgressBar;
    bool m_performanceMode;
    bool m_unkBool4;
    bool m_clickedGarage;
    bool m_clickedEditor;
    bool m_clickedName;
    bool m_clickedPractice;
    bool m_showedEditorGuide;
    bool m_showedRateDiffDialog;
    bool m_showedRateStarDialog;
    bool m_showedLowDetailDialog;
    void* m_unkPtr2;
    void* m_unkPtr3;
    int m_unkSize4_5;
    int m_unkSize4_6;
    int m_unkSize4_7;
    int m_unkSize4_8;
    int m_loadedBgID;
    int m_loadedGroundID;
    int m_loadedMG;
    int m_loadedFont;
    int m_loadedDeathEffect;
    bool m_loadingBG;
    bool m_loadingG;
    bool m_loadingG1;
    bool m_finishedLoadingG1;
    bool m_shouldLoadG1;
    bool m_finishedLoadingMG1;
    bool m_finishedLoadingMG2;
    bool m_unkBool5;
    int m_unkSize4_9;
    int m_unkSize4_10;
    int m_unkSize4_11;
    int m_bootups;
    bool m_hasRatedGame;
    bool m_unkBool6;
    bool m_shouldLoadUnlockValueKeeper;
    bool m_unkBool7;
    bool m_unkBool8;
    geode::SeedValueRSV m_hasRP;
    bool m_canGetLevelSaveData;
    int m_resolution;
    int m_texQuality;
    bool m_somethingInMenuLayer;
    void* m_unkPtr4;
    bool m_unkBool9;
    int m_unkSize4_12;
    int m_unkSize4_13;
    bool m_unkBool10;
    int m_unkSize4_14;
    bool m_disableThumbstick;
    float m_customFPSTarget;
    bool m_unkBool11;
    int m_customMenuSongID;
    int m_customPracticeSongID;
    std::map<int, int> m_loadIcon;
    std::map<int, std::map<int, int>> m_loadIcon2;
    std::map<int, bool> m_isIconBeingLoaded;
    std::array<int, 9>* m_keyStartForIcon;
    void* m_somethingKeyForIcon;
    void* m_idk;
    std::map<int, std::vector<cocos2d::CCObject*>> m_iconDelegates;
    int m_iconRequestID;
    cocos2d::CCArray* m_unkArray;
    void* m_someAdPointer;
    int m_unkSize4_15;
    int m_unkSize4_16;
    int m_unkSize4_17;
    UIButtonConfig m_dpad1;
    UIButtonConfig m_dpad2;
    UIButtonConfig m_dpad3;
    UIButtonConfig m_dpad4;
    UIButtonConfig m_dpad5;
    std::string m_dpadLayout1;
    std::string m_dpadLayout2;
    std::string m_dpadLayout3;
    std::string m_dpadLayoutDual1;
    std::string m_dpadLayoutDual2;
    std::string m_dpadLayoutDual3;
    int m_unkSize4_18;
    int m_unkSize4_19;
    int m_unkSize4_20;
    bool m_unkBool12;
    float m_practicePosX;
    float m_practicePosY;
    float m_practiceOpacity;
};

#endif /* __GAMEMANAGER_H__ */