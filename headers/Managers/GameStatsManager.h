#ifndef __GAMESTATSMANAGER_H__
#define __GAMESTATSMANAGER_H__


#include "../includes.h"

class GameStatsManager: public cocos2d::CCNode {
public:
    static GameStatsManager* sharedState();
    int accountIDForIcon(int p0, UnlockType p1);
    TodoReturn addSimpleSpecialChestReward(std::string p0, UnlockType p1, int p2, bool p3);
    void addSpecialRewardDescription(std::string p0, std::string p1);
    TodoReturn addStoreItem(int p0, int p1, int p2, int p3, ShopType p4);
    TodoReturn areChallengesLoaded();
    TodoReturn areRewardsLoaded();
    void awardCurrencyForLevel(GJGameLevel* p0);
    TodoReturn awardDiamondsForLevel(GJGameLevel* p0);
    TodoReturn awardSecretKey();
    TodoReturn checkAchievement(char const* p0);
    TodoReturn checkCoinAchievement(GJGameLevel* p0);
    void checkCoinsForLevel(GJGameLevel* p0);
    TodoReturn claimListReward(GJLevelList* p0);
    TodoReturn collectReward(GJRewardType p0, GJRewardItem* p1);
    TodoReturn collectVideoReward(int p0);
    TodoReturn completedChallenge(GJChallengeItem* p0);
    TodoReturn completedDailyLevel(GJGameLevel* p0);
    void completedDemonLevel(GJGameLevel* p0);
    TodoReturn completedLevel(GJGameLevel* p0);
    TodoReturn completedMapPack(GJMapPack* p0);
    void completedStarLevel(GJGameLevel* p0);
    TodoReturn countSecretChests(GJRewardType p0);
    TodoReturn countUnlockedSecretChests(GJRewardType p0);
    TodoReturn createSecretChestItems();
    TodoReturn createSecretChestRewards();
    TodoReturn createSpecialChestItems();
    TodoReturn createStoreItems();
    void dataLoaded(DS_Dictionary* p0);
    void encodeDataTo(DS_Dictionary* p0);
    void firstSetup();
    TodoReturn generateItemUnlockableData();
    int getAwardedCurrencyForLevel(GJGameLevel* p0);
    TodoReturn getAwardedDiamondsForLevel(GJGameLevel* p0);
    int getBaseCurrency(int p0, bool p1, int p2);
    int getBaseCurrencyForLevel(GJGameLevel* p0);
    TodoReturn getBaseDiamonds(int p0);
    TodoReturn getBonusDiamonds(int p0);
    GJChallengeItem* getChallenge(int p0);
    TodoReturn getChallengeKey(GJChallengeItem* p0);
    int getCollectedCoinsForLevel(GJGameLevel* p0);
    TodoReturn getCompletedMapPacks();
    TodoReturn getCurrencyKey(GJGameLevel* p0);
    TodoReturn getDailyLevelKey(int p0);
    TodoReturn getDemonLevelKey(GJGameLevel* p0);
    gd::string getGauntletRewardKey(int p0);
    TodoReturn getItemKey(int p0, int p1);
    int getItemUnlockState(int p0, UnlockType p1);
    int getItemUnlockStateLite(int p0, UnlockType p1);
    gd::string getLevelKey(GJGameLevel* p0);
    gd::string getLevelKey(int p0, bool p1, bool p2, bool p3);
    TodoReturn getListRewardKey(GJLevelList* p0);
    char const* getMapPackKey(int p0);
    TodoReturn getNextVideoAdReward();
    TodoReturn getPathRewardKey(int p0);
    GJChallengeItem* getQueuedChallenge(int p0);
    TodoReturn getRewardForSecretChest(int p0);
    TodoReturn getRewardForSpecialChest(std::string p0);
    TodoReturn getRewardItem(GJRewardType p0);
    TodoReturn getRewardKey(GJRewardType p0, int p1);
    GJChallengeItem* getSecondaryQueuedChallenge(int p0);
    TodoReturn getSecretChestForItem(int p0, UnlockType p1);
    TodoReturn getSecretCoinKey(char const* p0);
    TodoReturn getSpecialChestKeyForItem(int p0, UnlockType p1);
    TodoReturn getSpecialRewardDescription(std::string p0, bool p1);
    TodoReturn getSpecialUnlockDescription(int p0, UnlockType p1, bool p2);
    TodoReturn getStarLevelKey(GJGameLevel* p0);
    int getStat(char const* p0);
    TodoReturn getStatFromKey(StatKey p0);
    TodoReturn getStoreItem(int p0, int p1);
    TodoReturn getStoreItem(int p0);
    int getTotalCollectedCurrency();
    int getTotalCollectedDiamonds();
    bool hasClaimedListReward(GJLevelList* p0);
    bool hasCompletedChallenge(GJChallengeItem* p0);
    bool hasCompletedDailyLevel(int p0);
    bool hasCompletedDemonLevel(GJGameLevel* p0);
    bool hasCompletedGauntletLevel(int p0);
    bool hasCompletedLevel(GJGameLevel* level);
    bool hasCompletedMainLevel(int levelID);
    bool hasCompletedMapPack(int p0);
    bool hasCompletedOnlineLevel(int p0);
    bool hasCompletedStarLevel(GJGameLevel* p0);
    bool hasPendingUserCoin(char const* p0);
    bool hasRewardBeenCollected(GJRewardType p0, int p1);
    bool hasSecretCoin(char const* p0);
    bool hasUserCoin(char const* p0);
    TodoReturn incrementActivePath(int p0);
    TodoReturn incrementChallenge(GJChallengeType p0, int p1);
    TodoReturn incrementStat(char const* p0, int p1);
    TodoReturn incrementStat(char const* p0);
    bool isGauntletChestUnlocked(int p0);
    bool isItemEnabled(UnlockType p0, int p1);
    bool isItemUnlocked(UnlockType p0, int p1);
    bool isPathChestUnlocked(int p0);
    bool isPathUnlocked(StatKey p0);
    bool isSecretChestUnlocked(int p0);
    bool isSecretCoin(std::string p0);
    bool isSecretCoinValid(std::string p0);
    bool isSpecialChestLiteUnlockable(std::string p0);
    bool isSpecialChestUnlocked(std::string p0);
    bool isStoreItemUnlocked(int p0);
    TodoReturn keyCostForSecretChest(int p0);
    TodoReturn logCoins();
    TodoReturn markLevelAsCompletedAndClaimed(GJGameLevel* p0);
    TodoReturn postLoadGameStats();
    TodoReturn preProcessReward(GJRewardItem* p0);
    TodoReturn preSaveGameStats();
    TodoReturn processChallengeQueue(int p0);
    TodoReturn purchaseItem(int p0);
    TodoReturn recountSpecialStats();
    TodoReturn recountUserCoins(bool p0);
    TodoReturn registerRewardsFromItem(GJRewardItem* p0);
    TodoReturn removeChallenge(int p0);
    TodoReturn removeErrorFromSpecialChests();
    TodoReturn removeQueuedChallenge(int p0);
    TodoReturn removeQueuedSecondaryChallenge(int p0);
    TodoReturn resetChallengeTimer();
    TodoReturn resetPreSync();
    TodoReturn resetSpecialStatAchievements();
    TodoReturn resetUserCoins();
    TodoReturn restorePostSync();
    void setAwardedBonusKeys(int p0);
    void setStarsForMapPack(int p0, int p1);
    void setStat(char const* p0, int p1);
    void setStatIfHigher(char const* p0, int p1);
    TodoReturn setupIconCredits();
    TodoReturn shopTypeForItemID(int p0);
    TodoReturn shouldAwardSecretKey();
    TodoReturn starsForMapPack(int p0);
    TodoReturn storeChallenge(int p0, GJChallengeItem* p1);
    TodoReturn storeChallengeTime(int p0);
    TodoReturn storePendingUserCoin(char const* p0);
    TodoReturn storeQueuedChallenge(int p0, GJChallengeItem* p1);
    TodoReturn storeRewardState(GJRewardType p0, int p1, int p2, std::string p3);
    TodoReturn storeSecondaryQueuedChallenge(int p0, GJChallengeItem* p1);
    TodoReturn storeSecretCoin(char const* p0);
    void storeUserCoin(char const* p0);
    TodoReturn tempClear();
    void toggleEnableItem(UnlockType p0, int p1, bool p2);
    TodoReturn trySelectActivePath();
    void uncompleteLevel(GJGameLevel* p0);
    TodoReturn unlockGauntletChest(int p0);
    TodoReturn unlockPathChest(int p0);
    TodoReturn unlockSecretChest(int p0);
    TodoReturn unlockSpecialChest(std::string p0);
    TodoReturn updateActivePath(StatKey p0);
    gd::string usernameForAccountID(int p0);
    TodoReturn verifyUserCoins();
    virtual bool init();
    bool m_usePlayerStatsCCDictionary;
    cocos2d::CCString* m_trueString;
    cocos2d::CCDictionary* m_allStoreItems;
    cocos2d::CCDictionary* m_storeItems;
    cocos2d::CCDictionary* m_allTreasureRoomChests;
    cocos2d::CCDictionary* m_allTreasureRoomChestItems;
    cocos2d::CCDictionary* m_allSpecialChests;
    cocos2d::CCDictionary* m_allSpecialChestItems;
    std::unordered_map<int, std::string> m_specialRewardDescriptions;
    std::unordered_map<int, std::string> m_createSpecialChestItemsMap;
    cocos2d::CCDictionary* m_specialChestsLite;
    cocos2d::CCArray* m_storeItemArray;
    cocos2d::CCDictionary* m_rewardItems;
    cocos2d::CCDictionary* m_dailyChests;
    cocos2d::CCDictionary* m_worldAdvertChests;
    cocos2d::CCDictionary* m_activeChallenges;
    cocos2d::CCDictionary* m_upcomingChallenges;
    double m_challengeTime;
    cocos2d::CCDictionary* m_playerStats;
    std::unordered_map<int, int> m_playerStatsRandMap;
    std::unordered_map<int, int> m_playerStatsSeedMap;
    cocos2d::CCDictionary* m_completedLevels;
    cocos2d::CCDictionary* m_verifiedUserCoins;
    cocos2d::CCDictionary* m_pendingUserCoins;
    cocos2d::CCDictionary* m_purchasedItems;
    cocos2d::CCDictionary* m_onlineCurrencyScores;
    cocos2d::CCDictionary* m_mainCurrencyScores;
    cocos2d::CCDictionary* m_gauntletCurrencyScores;
    cocos2d::CCDictionary* m_timelyCurrencyScores;
    cocos2d::CCDictionary* m_onlineStars;
    cocos2d::CCDictionary* m_timelyStars;
    cocos2d::CCDictionary* m_gauntletDiamondScores;
    cocos2d::CCDictionary* m_timelyDiamondScores;
    cocos2d::CCDictionary* m_unusedCurrencyAwardDict;
    cocos2d::CCDictionary* m_challengeDiamonds;
    cocos2d::CCDictionary* m_completedMappacks;
    cocos2d::CCDictionary* m_completedLists;
    cocos2d::CCDictionary* m_weeklyChest;
    cocos2d::CCDictionary* m_treasureRoomChests;
    geode::SeedValueSRV m_bonusKey;
    cocos2d::CCDictionary* m_miscChests;
    cocos2d::CCDictionary* m_enabledItems;
    bool m_unkBoolIncrementStat;
    cocos2d::CCDictionary* m_unkDict;
    cocos2d::CCDictionary* m_unlockedItems;
    std::map<int, UnlockType> m_accountIDForIcon;
    std::map<int, std::string> m_usernameForAccountID;
    bool m_GS29;
    int m_activePath;
};

#endif /* __GAMESTATSMANAGER_H__ */